trigger:
  - raghav

stages:
  - stage: Setup
    displayName: Attach ACR and Enable Add-ons
    jobs:
      - job: SetupAKS
        displayName: Setup AKS Environment
        pool:
          vmImage: "ubuntu-latest"
        steps:
          # Attach ACR to AKS
          - script: |
              az aks update -n $(CLUSTER_NAME) -g $(RESOURCE_GROUP) --attach-acr $(ACR_NAME)
            displayName: Attach ACR to AKS

          # Enable HTTP Application Routing Add-on
          - script: |
              az aks enable-addons --addons http_application_routing --resource-group $(RESOURCE_GROUP) --name $(CLUSTER_NAME)
            displayName: Enable HTTP Application Routing

          # Verify HTTP Application Routing Add-on Status
          - script: |
              az aks show --resource-group $(RESOURCE_GROUP) --name $(CLUSTER_NAME) --query "addonProfiles.httpApplicationRouting"
            displayName: Verify HTTP Application Routing Status

          # Get and label AKS nodes for userpool
          - script: |
              kubectl get nodes --show-labels
              kubectl label node $(kubectl get nodes -o name | awk 'NR==1') pool=userpool
            displayName: Label AKS Nodes for User Pool

  - stage: Build
    displayName: Build and Push Docker Images
    jobs:
      - job: BuildPush
        displayName: Build and Push Docker Images
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: DockerInstaller@0
            displayName: Install Docker

          # Login to ACR
          - task: Docker@2
            displayName: Login to ACR
            inputs:
              command: login
              containerRegistry: $(ACR_NAME)

          # Build and Push AuthService
          - script: |
              docker build -t $(ACR_NAME)/auth-service:$(IMAGE_TAG) ./AuthService
              docker push $(ACR_NAME)/auth-service:$(IMAGE_TAG)
            displayName: Build and Push AuthService

          # Build and Push ProjectService
          - script: |
              docker build -t $(ACR_NAME)/project-service:$(IMAGE_TAG) ./ProjectService
              docker push $(ACR_NAME)/project-service:$(IMAGE_TAG)
            displayName: Build and Push ProjectService

          # Build and Push DeploymentHistoryService
          - script: |
              docker build -t $(ACR_NAME)/deployment-history-service:$(IMAGE_TAG) ./DeploymentHistoryService
              docker push $(ACR_NAME)/deployment-history-service:$(IMAGE_TAG)
            displayName: Build and Push DeploymentHistoryService

          # Build and Push UserService
          - script: |
              docker build -t $(ACR_NAME)/user-service:$(IMAGE_TAG) ./UserService
              docker push $(ACR_NAME)/user-service:$(IMAGE_TAG)
            displayName: Build and Push UserService

  - stage: Deploy
    displayName: Deploy Microservices to AKS
    dependsOn: Build
    jobs:
      - job: DeployToAKS
        displayName: Deploy Microservices to AKS
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: KubernetesManifest@0
            displayName: Deploy AuthService
            inputs:
              kubernetesServiceConnection: <Kubernetes_Service_Connection>
              namespace: default
              manifests: |
                $(Pipeline.Workspace)/AuthService/authservice-deployment.yaml
              containers: |
                $(ACR_NAME)/auth-service:$(IMAGE_TAG)

          - task: KubernetesManifest@0
            displayName: Deploy ProjectService
            inputs:
              kubernetesServiceConnection: <Kubernetes_Service_Connection>
              namespace: default
              manifests: |
                $(Pipeline.Workspace)/ProjectService/projectservice-deployment.yaml
              containers: |
                $(ACR_NAME)/project-service:$(IMAGE_TAG)

          - task: KubernetesManifest@0
            displayName: Deploy DeploymentHistoryService
            inputs:
              kubernetesServiceConnection: <Kubernetes_Service_Connection>
              namespace: default
              manifests: |
                $(Pipeline.Workspace)/DeploymentHistoryService/deploymenthistoryservice-deployment.yaml
              containers: |
                $(ACR_NAME)/deployment-history-service:$(IMAGE_TAG)

          - task: KubernetesManifest@0
            displayName: Deploy UserService
            inputs:
              kubernetesServiceConnection: <Kubernetes_Service_Connection>
              namespace: default
              manifests: |
                $(Pipeline.Workspace)/UserService/userservice-deployment.yaml
              containers: |
                $(ACR_NAME)/user-service:$(IMAGE_TAG)
